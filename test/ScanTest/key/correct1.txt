import <1:1>
identifier:other <1:8>
as <1:14>
identifier:ot <1:17>
; <1:19>
identifier:num <3:1>
= <3:5>
i61Const:3 <3:7>
; <3:8>
identifier:array <4:1>
= <4:7>
[ <4:9>
i61Const:1 <4:10>
, <4:11>
i61Const:2 <4:13>
, <4:14>
identifier:num <4:16>
] <4:19>
; <4:20>
identifier:t <5:1>
= <5:3>
- <5:5>
f61Const:1.500000 <5:6>
; <5:9>
func <7:1>
identifier:main <7:6>
( <7:10>
) <7:11>
{ <7:13>
for <8:3>
( <8:7>
identifier:element <8:8>
in <8:16>
identifier:array <8:19>
) <8:24>
{ <8:26>
if <9:5>
( <9:8>
identifier:element <9:9>
>= <9:17>
i61Const:3 <9:20>
&& <9:24>
identifier:array <9:25>
. <9:30>
identifier:len <9:31>
( <9:34>
) <9:35>
!= <9:37>
i61Const:4 <9:40>
) <9:41>
{ <9:43>
identifier:array <10:7>
. <10:12>
identifier:append <10:13>
( <10:19>
strConst:"a string" <10:21>
) <10:31>
; <10:32>
break <11:7>
; <11:12>
} <12:5>
else <12:7>
{ <12:12>
identifier:t <13:7>
/= <13:9>
f61Const:0.200000 <13:12>
; <13:15>
} <14:5>
} <15:3>
identifier:other <17:3>
:: <17:8>
identifier:condition <17:10>
= <17:20>
true <17:22>
; <17:26>
return <18:3>
i61Const:0 <18:10>
; <18:11>
} <19:1>
